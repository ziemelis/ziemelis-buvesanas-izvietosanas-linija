pipeline{
    agent any
  options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
        timestamps()

    }
  environment {
        // Norada vajadzigos mainigos
        FE_TAG = "${params.feBuild}"
        key = credentials('EC2')
        REPO = "public.ecr.aws/m3t0e0s9"
        FE_TAG = "${number}"
        FE_PORT = "3000"
        FE_IMAGE = "nextjs-app-new"
        ip_address = "0.0.0.0"
    }
    stages {
        stage('Write Docker Compose file') {
            steps {
                script{
                // Uzraksta docker compose failu
                def dockerCompose = """
                    version: "3"
                    services:
                      frontend:
                        image: ${REPO}/${FE_IMAGE}:${FE_TAG}
                        ports:
                          - ${FE_PORT}:${FE_PORT}
                """

                writeFile file: 'docker-compose.yaml', text: dockerCompose
                }
            }
        }
    stage('Innit Terraform') {
            steps {
            // Inicialize Terraform
             sh 'terraform init'
            }
        }
        stage('Run terraform apply') {
            steps {
              // Izpilda terraform apply komandu ar nepieciesamajiem mainigajiem
             sh 'terraform apply -auto-approve -var "pem_file=${key}" -var "pullfe_command=docker pull ${REPO}/${FE_IMAGE}:${FE_TAG}" -var "deploy_command=docker compose up -d " -var "ec2_name=Deploy Nr #$BUILD_NUMBER"'
             script{
              // Nolasa IP adresi no faila
                ip_address = readFile 'ip_file'
                }
             }
        }
    }        
    post {
    failure {
      // Nosūta Slack ziņojumu par neveiksmīgu izvietojumu
      slackSend (color: '#FF0000', message: "Deploy pipeline build #$BUILD_NUMBER failed.\n Build: $BUILD_URL")
    }
    success {
      // Nosuta Slack zinojumu par veiksmigu izvietojumu ar IP adresi
        slackSend(color: '#00FF00', message: "Deploy pipeline build #$BUILD_NUMBER finished.\n Ip address: http://${ip_address}:${FE_PORT}/")
    }
    always {
      // Notira darba vietu un resursus
      cleanWs()
    }
  }
}  