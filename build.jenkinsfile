pipeline {
agent any
environment {
        repo = credentials('my-ecr-repo')
        scannerHome = tool 'NextJs'
    }
stages {
  stage('SonarQube Analysis') {
    steps {
    withSonarQubeEnv('sonarqube') {
      sh "${scannerHome}/bin/sonar-scanner"
    }
    }
  }
  stage('Install packages') {
    steps {
      sh 'yarn install'
    }
  }
  stage('Run lint test') {
    steps {
      sh 'yarn lint'
    }
  }
  stage('Run jest test') {
    steps {
      sh 'yarn test'
    }
  }
  stage('Build Next.js app') {
    steps {
      sh 'yarn build'
    }
  }
  stage("Quality Gate from SonarQube") {
 steps{
  timeout(time: 1, unit: 'HOURS') {
            waitForQualityGate abortPipeline: true
            }
          }
  }
  stage('Create Docker image') {
    steps {
      sh 'docker build -t nextjs-app-new:$BUILD_NUMBER .'
    }
  }
  stage('Push Docker image') {
    steps {
      sh 'aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${repo}'
      sh 'docker tag nextjs-app-new:$BUILD_NUMBER ${repo}/nextjs-app-new:$BUILD_NUMBER'
      sh 'docker push ${repo}/nextjs-app-new:$BUILD_NUMBER'
    }
  }
  stage('cleanup workspace'){
        steps{
        cleanWs()
        }
      }
  }
}
